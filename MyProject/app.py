import PySimpleGUI as sg
import cv2
from easyocr import Reader
from PIL import Image
import io
from deep_translator import GoogleTranslator
import language_tool_python


def prepare_image(path):
    res = Image.open(path)
    res.thumbnail((400, 400))
    bio = io.BytesIO()
    res.save(bio, format="PNG")
    return bio.getvalue()


def cleanup_text(text):
    # strip out non-ASCII text so we can draw the text on the image
    return "".join([c if ord(c) < 128 or (ord(c) >= 1040 and ord(c) <= 1103) else "" for c in text]).strip()


def text_to_send(text):
    s = ''
    for t in text:
        s += t + '\n'
    return s


def preprocess_image(image_path):
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)
    blurred = cv2.GaussianBlur(thresh, (5, 5), 0)
    return blurred


def process(path, lang, gpu):
    print(f'OCR`ing with the following language: {lang}')
    image = preprocess_image(path)

    reader = Reader([lang], gpu=gpu > 0)
    results = reader.readtext(image)

    all_text = []

    for (bbox, text, prob) in results:
        all_text.append(text)

        # Unpack the bounding box
        (tl, tr, br, bl) = bbox
        tl = (int(tl[0]), int(tl[1]))
        tr = (int(tr[0]), int(tr[1]))
        br = (int(br[0]), int(br[1]))
        bl = (int(bl[0]), int(bl[1]))

        # Cleanup the text and draw the box surrounding the text
        text = cleanup_text(text)
        cv2.rectangle(image, tl, br, (0, 255, 0), 2)
        cv2.putText(image, text, (tl[0], tl[1] - 10), cv2.FONT_HERSHEY_COMPLEX, 0.8, (0, 255, 0), 2)

    # Show the output image
    cv2.imwrite('res.png', image)
    result = prepare_image('res.png')
    res_text = text_to_send(all_text)
    return result, res_text


def create_help_window():
    layout_help = [
        [sg.Text('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.')],
        [sg.Text('–©–µ–ª–∫–Ω–∏—Ç–µ –Ω–∞ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:')],
        [sg.Text('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: –†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –ò—Å–ø–∞–Ω—Å–∫–∏–π, –ù–µ–º–µ—Ü–∫–∏–π, –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π, –ö—ã—Ä–≥—ã–∑—Å–∫–∏–π, –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π, –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π, –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π, –ü–æ–ª—å—Å–∫–∏–π, –ê—Ä–∞–±—Å–∫–∏–π, –Ø–ø–æ–Ω—Å–∫–∏–π, –ö–∏—Ç–∞–π—Å–∫–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π), –ö–æ—Ä–µ–π—Å–∫–∏–π, –•–∏–Ω–¥–∏')],
        [sg.Text('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å" –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.')],
        [sg.Button('–ó–∞–∫—Ä—ã—Ç—å')]
    ]
    return sg.Window('–ü–æ–º–æ—â—å', layout_help)


# Setup GUI
layout = [
    [sg.Text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:')],
    [sg.InputText(key='-FILEPATH-'), sg.FileBrowse(button_text='–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª...'),
     sg.FileBrowse(file_types=[('JPG Files', '*.jpg'), ('PNG Files', '*.png'), ('JPEG Files', '*.jpeg')])],
    [sg.Text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞:')],
    [sg.Combo(['–†—É—Å—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–ò—Å–ø–∞–Ω—Å–∫–∏–π', '–ù–µ–º–µ—Ü–∫–∏–π', '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π', '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π', '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π', '–ü–æ–ª—å—Å–∫–∏–π', '–ê—Ä–∞–±—Å–∫–∏–π', '–Ø–ø–æ–Ω—Å–∫–∏–π', '–ö–∏—Ç–∞–π—Å–∫–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)', '–ö–æ—Ä–µ–π—Å–∫–∏–π', '–•–∏–Ω–¥–∏'],
              key='-COMBO-', default_value='–†—É—Å—Å–∫–∏–π')],
    [sg.Text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:')],
    [sg.Combo(['–†—É—Å—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–ò—Å–ø–∞–Ω—Å–∫–∏–π', '–ù–µ–º–µ—Ü–∫–∏–π', '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π', '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π', '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π', '–ü–æ–ª—å—Å–∫–∏–π', '–ê—Ä–∞–±—Å–∫–∏–π', '–Ø–ø–æ–Ω—Å–∫–∏–π', '–ö–∏—Ç–∞–π—Å–∫–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)', '–ö–æ—Ä–µ–π—Å–∫–∏–π', '–•–∏–Ω–¥–∏'],
              key='-TRANSLATE-', default_value='–†—É—Å—Å–∫–∏–π')],
    [sg.Text('‚ñ∂Ô∏è —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏')],
    [sg.Multiline(key='-TEXT-', size=(50, 5),
                  default_text='–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...')],
    [sg.Text('üîÑ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–µ—Ä–µ–≤–µ–¥–µ–Ω')],
    [sg.Multiline(key='-TRANSLATED-', size=(50, 5),
                  default_text='–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...')],
    [sg.Image(key='-IMAGE-')],
    [sg.Button('–ù–∞—á–∞—Ç—å'), sg.Button('–í—ã—Ö–æ–¥'), sg.Push(), sg.Button('–ü–æ–º–æ—â—å')]
]

window = sg.Window('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥', layout)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–∞ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è OCR –∏ –ø–µ—Ä–µ–≤–æ–¥–∞
language_dict = {
    '–†—É—Å—Å–∫–∏–π': 'ru',
    '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π': 'en',
    '–ò—Å–ø–∞–Ω—Å–∫–∏–π': 'es',
    '–ù–µ–º–µ—Ü–∫–∏–π': 'de',
    '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π': 'fr',
    '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π': 'ky',
    '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π': 'it',
    '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π': 'pt',
    '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π': 'nl',
    '–ü–æ–ª—å—Å–∫–∏–π': 'pl',
    '–ê—Ä–∞–±—Å–∫–∏–π': 'ar',
    '–Ø–ø–æ–Ω—Å–∫–∏–π': 'ja',
    '–ö–∏—Ç–∞–π—Å–∫–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)': 'zh-cn',
    '–ö–æ—Ä–µ–π—Å–∫–∏–π': 'ko',
    '–•–∏–Ω–¥–∏': 'hi'
}

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
tool = language_tool_python.LanguageTool('ru')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞

while True:
    event, values = window.read()

    if event == sg.WINDOW_CLOSED or event == '–í—ã—Ö–æ–¥':
        break

    if event == '–ù–∞—á–∞—Ç—å':
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        translate_lang = language_dict[values['-TRANSLATE-']]

        r, t = process(values['-FILEPATH-'], language_dict[values['-COMBO-']], -1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        matches = tool.check(t)
        corrected_text = language_tool_python.utils.correct(t, matches)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        try:
            translated_text = GoogleTranslator(source='auto', target=translate_lang).translate(corrected_text)
        except Exception as e:
            translated_text = f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"

        # –û–±–Ω–æ–≤–ª—è–µ–º GUI
        window['-IMAGE-'].update(data=r)
        window['-TEXT-'].update(t)  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏
        window['-TRANSLATED-'].update(translated_text)  # –ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        print(translated_text)

    if event == '–ü–æ–º–æ—â—å':
        window_help = create_help_window()
        while True:
            event2, values2 = window_help.read()
            if event2 == '–ó–∞–∫—Ä—ã—Ç—å' or event2 == sg.WINDOW_CLOSED:
                break
        window_help.close()

window.close()
