import PySimpleGUI as sg
from easyocr import Reader
from deep_translator import GoogleTranslator
import language_tool_python
import cv2
from PIL import Image
import io
import os
import numpy as np
import warnings
warnings.filterwarnings("ignore", category=UserWarning, module='PIL')


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def prepare_image(path):
    res = Image.open(path)
    res.thumbnail((400, 400))
    bio = io.BytesIO()
    res.save(bio, format="PNG")
    return bio.getvalue()

def cleanup_text(text):
    return "".join([c if ord(c) < 128 or (ord(c) >= 1040 and ord(c) <= 1103) else "" for c in text]).strip()

def text_to_send(text):
    return '\n'.join(text)

def preprocess_image(image_path):
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)
    blurred = cv2.GaussianBlur(thresh, (5, 5), 0)
    return blurred

def process(path, lang, gpu):
    print(f'OCRing with the following language: {lang}')
    image = preprocess_image(path)

    reader = Reader([lang], gpu=gpu > 0)
    results = reader.readtext(image)

    all_text = []

    for (bbox, text, prob) in results:
        all_text.append(text)

        (tl, tr, br, bl) = bbox
        tl = (int(tl[0]), int(tl[1]))
        br = (int(br[0]), int(br[1]))

        text = cleanup_text(text)
        cv2.rectangle(image, tl, br, (0, 255, 0), 2)
        cv2.putText(image, text, (tl[0], tl[1] - 10), cv2.FONT_HERSHEY_COMPLEX, 0.8, (0, 255, 0), 2)

    cv2.imwrite('res.png', image)
    result = prepare_image('res.png')
    res_text = text_to_send(all_text)
    return result, res_text

def create_help_window():
    layout_help = [
        [sg.Text('üîπ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π:\n')],
        [sg.Text(' –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª...", —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')],
        [sg.Text(' –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—Å–∞–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.')],
        [sg.Text(' –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.')],
        [sg.Text(' –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å" –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n')],
        [sg.Text('üîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:')],
        [sg.Text(', '.join(language_dict.keys()))],
        [sg.Text('\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:')],
        [sg.Text(' JPG, JPEG, PNG')],
        [sg.Text(' –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 5 –ú–ë')],
        [sg.Text(' –§–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')],
        [sg.Text(' –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏.')],
        [sg.Button('–ó–∞–∫—Ä—ã—Ç—å')]
    ]
    return sg.Window('–ü–æ–º–æ—â—å', layout_help)


def show_error(message):
    layout = [[sg.Text(message)], [sg.Button('–ó–∞–∫—Ä—ã—Ç—å')]]
    window = sg.Window('–û—à–∏–±–∫–∞', layout, modal=True)
    while True:
        event, _ = window.read()
        if event == '–ó–∞–∫—Ä—ã—Ç—å' or event == sg.WINDOW_CLOSED:
            break
    window.close()

# GUI
layout = [
    [sg.Text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:')],
    [sg.InputText(key='-FILEPATH-'), sg.FileBrowse(button_text='–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª...', file_types=[('Image Files', '*.jpg;*.jpeg;*.png')])],
    [sg.Text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞:')],
    [sg.Combo(['–†—É—Å—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–ò—Å–ø–∞–Ω—Å–∫–∏–π', '–ù–µ–º–µ—Ü–∫–∏–π', '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π', '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π', '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π', '–ü–æ–ª—å—Å–∫–∏–π', '–ê—Ä–∞–±—Å–∫–∏–π', '–Ø–ø–æ–Ω—Å–∫–∏–π', '–ö–∏—Ç–∞–π—Å–∫–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)', '–ö–æ—Ä–µ–π—Å–∫–∏–π', '–•–∏–Ω–¥–∏'],
              key='-COMBO-', default_value='–†—É—Å—Å–∫–∏–π')],
    [sg.Text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:')],
    [sg.Combo(['–†—É—Å—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–ò—Å–ø–∞–Ω—Å–∫–∏–π', '–ù–µ–º–µ—Ü–∫–∏–π', '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π', '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π', '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π', '–ü–æ–ª—å—Å–∫–∏–π', '–ê—Ä–∞–±—Å–∫–∏–π', '–Ø–ø–æ–Ω—Å–∫–∏–π', '–ö–∏—Ç–∞–π—Å–∫–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)', '–ö–æ—Ä–µ–π—Å–∫–∏–π', '–•–∏–Ω–¥–∏'],
              key='-TRANSLATE-', default_value='–†—É—Å—Å–∫–∏–π')],
    [sg.Text('‚ñ∂Ô∏è —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏')],
    [sg.Multiline(key='-TEXT-', size=(50, 5), default_text='–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...')],
    [sg.Text('üîÑ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–µ—Ä–µ–≤–µ–¥–µ–Ω')],
    [sg.Multiline(key='-TRANSLATED-', size=(50, 5), default_text='–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...')],
    [sg.Image(key='-IMAGE-')],
    [sg.Button('–ù–∞—á–∞—Ç—å'), sg.Button('–°–±—Ä–æ—Å–∏—Ç—å'), sg.Button('–í—ã—Ö–æ–¥'), sg.Push(), sg.Button('–ü–æ–º–æ—â—å')]
]

window = sg.Window('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥', layout, finalize=True)

# –ü—Ä–∏–≤—è–∑–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –∫ Multiline-–ø–æ–ª—è–º
def bind_multiline_hotkeys(window, keys):
    for key in keys:
        widget = window[key].Widget
        widget.bind('<Control-a>', lambda e, w=widget: (w.tag_add('sel', '1.0', 'end'), 'break'))
        widget.bind('<Control-A>', lambda e, w=widget: (w.tag_add('sel', '1.0', 'end'), 'break'))
        widget.bind('<Control-c>', lambda e, w=widget: (w.event_generate("<<Copy>>"), 'break'))
        widget.bind('<Control-C>', lambda e, w=widget: (w.event_generate("<<Copy>>"), 'break'))
        widget.bind('<Control-v>', lambda e, w=widget: (w.event_generate("<<Paste>>"), 'break'))
        widget.bind('<Control-V>', lambda e, w=widget: (w.event_generate("<<Paste>>"), 'break'))
        widget.bind('<Control-x>', lambda e, w=widget: (w.event_generate("<<Cut>>"), 'break'))
        widget.bind('<Control-X>', lambda e, w=widget: (w.event_generate("<<Cut>>"), 'break'))

bind_multiline_hotkeys(window, ['-TEXT-', '-TRANSLATED-'])


language_dict = {
    '–†—É—Å—Å–∫–∏–π': 'ru',
    '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π': 'en',
    '–ò—Å–ø–∞–Ω—Å–∫–∏–π': 'es',
    '–ù–µ–º–µ—Ü–∫–∏–π': 'de',
    '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π': 'fr',
    '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π': 'ky',
    '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π': 'it',
    '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π': 'pt',
    '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π': 'nl',
    '–ü–æ–ª—å—Å–∫–∏–π': 'pl',
    '–ê—Ä–∞–±—Å–∫–∏–π': 'ar',
    '–Ø–ø–æ–Ω—Å–∫–∏–π': 'ja',
    '–ö–∏—Ç–∞–π—Å–∫–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)': 'zh-cn',
    '–ö–æ—Ä–µ–π—Å–∫–∏–π': 'ko',
    '–•–∏–Ω–¥–∏': 'hi'
}

tool = language_tool_python.LanguageTool('ru')

while True:
    event, values = window.read()

    if event == sg.WINDOW_CLOSED or event == '–í—ã—Ö–æ–¥':
        break

    if event == '–ù–∞—á–∞—Ç—å':
        if not values['-FILEPATH-']:
            show_error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
            continue
        if not values['-COMBO-']:
            show_error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞.')
            continue
        if not values['-TRANSLATE-']:
            show_error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.')
            continue
        if not os.path.isfile(values['-FILEPATH-']):
            show_error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.')
            continue
        if not values['-FILEPATH-'].endswith(('.jpg', '.jpeg', '.png')):
            show_error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.')
            continue
        if values['-COMBO-'] == values['-TRANSLATE-']:
            show_error('–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å.')
            continue

        
        file_size = os.path.getsize(values['-FILEPATH-'])
        if file_size > 5 * 1024 * 1024:
            show_error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –±–æ–ª–µ–µ 5 –ú–ë.')
            continue
        if file_size == 0:
            show_error('–§–∞–π–ª –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.')
            continue

        image_path = values['-FILEPATH-']
        ocr_lang = language_dict[values['-COMBO-']]
        translate_lang = language_dict[values['-TRANSLATE-']]

        try:
            r, t = process(image_path, ocr_lang, -1)
        except Exception as e:
            show_error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}')
            continue


        matches = tool.check(t)
        corrected_text = language_tool_python.utils.correct(t, matches)

        try:
            translated_text = GoogleTranslator(source='auto', target=translate_lang).translate(corrected_text)
        except Exception as e:
            translated_text = f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"

        window['-IMAGE-'].update(data=r)
        window['-TEXT-'].update(t)
        window['-TRANSLATED-'].update(translated_text)

    if event == '–°–±—Ä–æ—Å–∏—Ç—å':
        window['-FILEPATH-'].update('')
        # –û—Å—Ç–∞–≤–ª—è–µ–º —è–∑—ã–∫ –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏
        window['-TEXT-'].update('')
        window['-TRANSLATED-'].update('')
        window['-IMAGE-'].update(data=None)

    if event == '–ü–æ–º–æ—â—å':
        window_help = create_help_window()
        while True:
            event2, _ = window_help.read()
            if event2 == '–ó–∞–∫—Ä—ã—Ç—å' or event2 == sg.WINDOW_CLOSED:
                break
        window_help.close()

window.close()
